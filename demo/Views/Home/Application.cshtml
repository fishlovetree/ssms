@{
    ViewBag.Title = "Application";
}
<script type="text/javascript" src="~/Scripts/threeJs/three.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/controls/OrbitControls.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/loaders/ColladaLoader2.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/extras/Earcut.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/threeBasic.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.als-1.7.js"></script>
<script type="text/javascript" src="https://webapi.amap.com/maps?v=1.4.10&key=b2d0df047c4228dc9243e6fda961aeb0&plugin=AMap.Autocomplete,AMap.PlaceSearch"></script>
<script type="text/javascript">
	var map;
	var object3Dlayer;
	var prisms = [];
	var renderAnimation;
    $(function(){
		//地图加载
		var mapOpt = {
			mapStyle: 'amap://styles/e669bfcd88d5760c202fa10ef1f07346', //设置地图的显示样式
			resizeEnable: true,		//设置可调整大小
			viewMode: "3D", // 开启 3D 模式
            pitch: 55,
			rotation: 55,
			zoom: 17.7,
			zooms: [15, 18],
			center: [120.060337, 30.318248]
		}
		map = new AMap.Map("map", mapOpt);

		map.on("complete", function() {
			// 设置光照
			map.AmbientLight = new AMap.Lights.AmbientLight([1, 1, 1], 0.6);
			map.DirectionLight = new AMap.Lights.DirectionLight(
			[-6, -2, 14],
			[1, 1, 1],
			0.8
			);
			// 添加 Object3DLayer 图层，用于添加 3DObject 对象
			object3Dlayer = new AMap.Object3DLayer();
			map.add(object3Dlayer);
			//地图模块加载完成
			getBuildings(prisms, object3Dlayer, map);
		});

		// prism 拾取
		map.on("mousemove", function(ev) {
			var pixel = ev.pixel;
			var px = new AMap.Pixel(pixel.x, pixel.y);
			var obj = map.getObject3DByContainerPos(px, [object3Dlayer], false) || {};

			// 选中的 face 所在的索引
			var index = obj.index;
			// 选中的 object3D 对象，这里为当前 Mesh
			var object = obj.object;
			// 被拾取到的对象和拾取射线的交叉点的3D坐标
			var point = obj.point;
			// 交叉点距透视原点的距离
			var distance = obj.distance;

			//updateInfo(obj);
			updateColor(object);
        });

        map.on("click", function(ev) {
			// console.log("ev", ev);
			var pixel = ev.pixel;
			var px = new AMap.Pixel(pixel.x, pixel.y);
			var obj =
			map.getObject3DByContainerPos(px, [object3Dlayer], false) || {};

			// 选中的 face 所在的索引
			var index = obj.index;
			// 选中的 object3D 对象，这里为当前 Mesh
			var object = obj.object;
			if (object) {
				$(".floorInfo").show();
				loadBanner(1, 1);
            }
			// 被拾取到的对象和拾取射线的交叉点的3D坐标
			var point = obj.point;
			// 交叉点距透视原点的距离
			var distance = obj.distance;
		});

		$("#wsContainer").css(
          "height",
          $("#wsContainer")
            .parent()
            .height() - 40
		);
		$("#wsContainer").css(
          "width",
          $("#wsContainer")
            .parent()
            .width() - 1
        );
        threeBasic.init3D("wsContainer"); //初始化三维
        threeBasic.init3DObject(); //初始化三维对象
        //定义三维事件
		document.getElementById("wsContainer").addEventListener('mousemove', this.onDocumentMouseMove, false);
	    document.getElementById("wsContainer").addEventListener("mousedown",this.onDocumentMouseDown, false);
	})

	function getBuildings(){
		var buildings = [{center: "[120.060863,30.318025]", regionName: "一期A座", bounds: "[120.060503,30.317814],[120.061233,30.317879],[120.06119,30.318217],[120.060465,30.318166]",
			height: 500},{center: "[120.060182,30.317979]", regionName: "一期B座", bounds: "[120.059999,30.317799],[120.060407,30.317812],[120.060364,30.318164],[120.059956,30.318141]",
			height: 500},{center: "[120.059672,30.317954]", regionName: "一期C座", bounds: "[120.059488,30.317780],[120.05994,30.317799],[120.059900,30.318127],[120.059457,30.318095]",
			height: 500},{center: "[120.059672,30.318364]", regionName: "一期D座", bounds: "[120.059468,30.318190],[120.059893,30.318211],[120.059882,30.31847],[120.059455,30.318460]",
			height: 500},{center: "[120.059887,30.318766]", regionName: "一期E座", bounds: "[120.059618,30.318581],[120.060155,30.318605],[120.060128,30.318984],[120.059586,30.318956]",
			height: 500},{center: "[120.059275,30.318729]", regionName: "一期F座", bounds: "[120.059071,30.318572],[120.059538,30.318593],[120.059520,30.318956],[120.05906,30.318919]",
			height: 500},{center: "[120.060627,30.318771]", regionName: "一期G座", bounds: "[120.060273,30.318634],[120.061018,30.318669],[120.060976,30.318975],[120.060262,30.318934]",
			height: 500}
		];
		buildings.forEach(item => {
            if (item.bounds){
              var pat = "[" + item.bounds + "]";
              var paths = eval("(" + pat + ")");
              var bounds = paths.map(function(path) {
                return new AMap.LngLat(path[0], path[1]);
              });
              // 创建 Object3D 对象
              var prism = new AMap.Object3D.Prism({
                path: bounds,
                height: item.height,
                color: "rgba(24, 82, 157, 0.9)", // 支持 #RRGGBB、rgb()、rgba() 格式数据
                gid: item.regionId
			  });
			  prism.gid = item.regionId;
              prisms.push(prism);
              // 开启透明度支持
              //prism.transparent = true;
              // 添加至 3D 图层
              object3Dlayer.add(prism);
              var text = new AMap.Text({
                text: item.regionName,
                // text: '一期',
                verticalAlign: "bottom",
                position: eval("(" + item.center + ")"),
                height: item.height,
                style: {
                  "background-color": "transparent",
                  "-webkit-text-stroke": "white",
                  "-webkit-text-stroke-width": "0.1px",
                  "text-align": "center",
                  border: "none",
                  color: "white",
                  "font-size": "10px"
                }
              });
              text.setMap(map);
            }
        });
	}

	function updateColor(obj) {
        var prism = prisms.find(function(prism) {
          return prism == obj;
        });

        // 重置 prism 颜色
        prisms.forEach(function(prism) {
          updateMeshColor(prism, [24 / 255, 82 / 255, 157 / 255, 1]);
        });

        // 更新选中 prism 的 颜色
        if (prism) {
          updateMeshColor(prism, [59 / 255, 182 / 255, 198 / 255, 0.8]);
        }
    }

    function updateMeshColor(mesh, color) {
        var vertexColors = mesh.geometry.vertexColors;
        var len = vertexColors.length;
        for (var i = 0; i < len / 4; i++) {
          var r = color[0];
          var g = color[1];
          var b = color[2];
          var a = color[3];
          // 不能重新赋值，只允许修改内容
          vertexColors.splice(i * 4, 4, r, g, b, a);
        }

        mesh.needUpdate = true;
        mesh.reDraw();
	}

	function loadBanner(buildingId,floorId) {

		//render(); //重新渲染

	    var dataObj = [
			{regionId: 1, regionName: "一期A座一层", pictureName: "../../Images/gis/a01.png"},
			{regionId: 2, regionName: "一期A座二层", pictureName: "../../Images/gis/a02.png"}
		];
		var banner =
		"<div class='als-container' id='my-als-list' style='width: 100%;'><div class='als-top-con'></div>" +
		"<div class='als-viewport'>" +
		"<div class='als-wrapper'>";
		if (dataObj && dataObj.length > 0) {
			// 定位到楼层
			if(floorId===undefined){
				floorId = dataObj[0].regionId;
			}else {
				floorId = floorId
			}
			dataObj.forEach(n => {
				var div =
				"<div class='als-item als-item-" +
				n.regionId +
				"'><a href='#' onclick=loadFloor('" +
				n.regionId +
				"')><img src='" +
				n.pictureName +
				"' alt='" +
				n.regionName +
				"' title='" +
				n.regionName +
				"' /></a>" +
				n.regionName +
				"</div>";
				banner = banner + div;
			});
		}
		banner =
		banner +
		"</div></div><span class='als-prev'></span><span class='als-next'></span></div>";
		$("#wsContainer").append($(banner));
		$("#my-als-list").als({
		visible_items: 5,
		scrolling_items: 1,
		orientation: "horizontal",
		circular: "yes",
		autoscroll: "no",
		interval: 5000,
		speed: 500,
		easing: "linear",
		direction: "right",
		start_from: 0
		});

		$(".als-top-con").css("left", $(".floorInfo").width() / 2 - 25);

		$(".als-top-con").click(function() {
			var span = $(this).find("span");
			var als = span.prop("class");
			if (als == "als-down") {
				span.prop("class", "als-up");
				$(".als-container").animate({ bottom: "-88px" });
			} else {
				span.prop("class", "als-down");
				$(".als-container").animate({ bottom: "0px" });
			}
		});
		//加载楼层
		if (floorId) {
		    this.loadFloor(floorId);
		}
	}

	function loadFloor(floorId) {
        $("div[class^='als-item']").removeClass("als-item-selected");
        $(".als-item-" + floorId).addClass("als-item-selected");
        if (this.renderAnimation) {
            cancelAnimationFrame(this.renderAnimation);
            this.renderAnimation = undefined; //取消循环渲染
        }
        threeBasic.clearBuilding(); //移除原有模型
        render(); //重新渲染
	    threeBasic.refreshThreeWindow();

		var dataObj;
		if (floorId == 1){
			dataObj = {
				regionName: "一期A座一层",
				modelcode: 10001,
				modelurl: "../../Content/json/a01.json",
				rotation: "[0,0,55]",
				position: "[120.06024810488736,30.318465889959207,0,2.25]",
				cameraposition: "[-17.68,82.0,0]",
				cameratarget: "[0,0,0]",
				labelurl: "../../Content/json/a01label.json",
			}
		}
		else if (floorId == 2){
			dataObj = {
				regionName: "一期A座二层",
				modelcode: 10001,
				modelurl: "../../Content/json/a02.json",
				rotation: "[0,0,55]",
				position: "[120.06024810488736,30.318465889959207,6,2.25]",
				cameraposition: "[-17.68,82.0,0]",
				cameratarget: "[0,0,0]",
				labelurl: "../../Content/json/a02label.json",
			}
		}

        $("#floorName").show();
        $("#floorName").html(
            dataObj.regionName ? dataObj.regionName : "未定义楼层"
        );
		let dataJson = {
			id: dataObj.modelcode,
			url: dataObj.modelurl,
			heading: eval("(" + dataObj.rotation + ")")[2],
			name: dataObj.modelname,
			coords: eval("(" + dataObj.position + ")"),
			label: dataObj.label,
			cameraposition: dataObj.cameraposition
				? eval("(" + dataObj.cameraposition + ")")
				: "",
			cameratarget: dataObj.cameratarget
				? eval("(" + dataObj.cameratarget + ")")
				: ""
		};
		$.getJSON(dataObj.modelurl, function(data){
			threeBasic.addmodel(dataJson, data);
			$.getJSON(dataObj.labelurl, function(data){
				threeBasic.createLabel(data);
			})
		})
		// axios({
		// 	method: "get",
		// 	url: dataObj.modelurl,
		// 	dataType: "json",
		// 	crossDomain: true,
		// 	cache: false
		// }).then(res => {
		// 	threeBasic.addmodel(dataJson, res.data);
		// });
		// axios({
		// 	method: "get",
		// 	url: dataObj.label,
		// 	dataType: "json",
		// 	crossDomain: true,
		// 	cache: false
		// }).then(res => {
		// 	threeBasic.createLabel(res.data);
		// });
		// getFloorCustomers({ regionId: floorId }).then(s => {
		// 	if (s.data.code === 1) {
		// 		threeBasic.addCustomersToMap(s.data.data);
		// 	}
		// });
    }

	function render() {
      threeBasic.updatePopPosition();		//更新popup框的位置
      threeBasic.updateLabelSprite(); //更新文字位置
      threeBasic.updateCustomerSprite(); //更新客户图标
      threeBasic.updateCustomerLabel(); //更新客户标注

      threeBasic.updateControls(); //更新鼠标交互
      threeBasic.render();
      this.renderAnimation = requestAnimationFrame(this.render); //动画帧循环
	}

    function onDocumentMouseMove(event) {
        event.preventDefault();
        threeBasic.onDocumentMouseMove(event);
	}

    function onDocumentMouseDown(event) {
        event.preventDefault();
        threeBasic.onDocumentMouseDown(event);
	}

	function closeFloorInfo(){
		$("body").find("#my-als-list").remove();
		$(".floorInfo").hide();
	}
</script>
<div style="width:100%;height:100%;position:absolute;left:0;top:0;" id="map">
</div>
<!-- 楼层弹出框 -->
<div class="floorInfo" style="display: none;">
    <div id="" style="background:#171e30;color:#fff;height:40px;line-height:40px;padding:0 15px;">
        <button type="button" class="close pull-right" id="" onclick="closeFloorInfo()" style="color:#fff;opacity:1;line-height:40px;width:40px;">×</button>
        <p>楼层图</p>
    </div>
    <div id="wsContainer" style="width:100%;">
        <!-- 右侧菜单按钮 -->
        <div class="rightMenu" style="position:absolute;right:15px;top:5px;z-index:1002;">
            <div class="rightMenuItem" id="settingBtn">
                <a title="设置" href="#" style="border-radius:0 0 0 4px;">
                    <i class="iconfont icon-setting"></i>
                </a>
            </div>
        </div>
        <!-- 要素按类型显示 -->
        <!-- <div id="deviceFilter" class="deviceFilter" style="display:none;">
            <div class="devicebutton">设备筛选</div>
            <div id="deviceItemContainer" class="deviceItemContainer" style="height:150px;overflow: auto;background-color: #fff;color: #333;margin: 2px 5px;">
            </div>
            <div class="devicebutton"><input type="checkbox" name="showAll" checked=""
                value="all">全部显示</div>
        </div> -->
    </div>
    <!-- 楼层名称显示框 -->
    <div class="floorName" id="floorName" style="position: absolute;left: 0px;top: 50%;z-index: 1002;width:25px;transform:translateY(-50%);
	color: #fff;font-size: 20px;font-weight:bold;text-shadow: 2px 2px 2px #333;text-align: center;display:none;">
    </div>
    <!-- 弹出框样式 -->
    <!-- <div class="popup" id="popup">
        <div class="pop-header">
            <div id="popup-title" class="popup-title"></div>
            <a href="#" id="popup-closer" class="popup-closer"></a>
        </div>
        <div id="popup-content" class="popup-content"></div>
    </div> -->
</div>
<div style="width:100%;height:30px;position:absolute;left:0;bottom:0;">
    <p style="text-align:center;">
        <span style="font-size:14px;color:#fff">
            版权所有:龙&琴&nbsp;<a style="font-size:14px;color:#fff" href="http://www.beian.miit.gov.cn">备案号：浙ICP备17011216号</a>
        </span>
    </p>
</div>
