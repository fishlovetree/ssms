@{
    ViewBag.Title = "Home Page";
}
<script type="text/javascript" src="~/Scripts/threeJs/three.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/controls/OrbitControls.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/loaders/ColladaLoader2.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/extras/Earcut.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/ThreeBSP.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/extras/tween.min.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/libs/ui.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/libs/ui.three.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/controls/TrackballControls.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/controls/DragControls.js"></script>
<script type="text/javascript" src="~/Scripts/threeJs/controls/TransformControls.js"></script>
<script type="text/javascript">
    var renderer, scene, camera, labelRenderer;
    var raycaster;
    var mouse;
    var controls;
    var trackballControls;
    var transformControls;
    var container;
    var objects = [];
    var selectedObject;
    var selectedFaceIndex;
    var materialMap;

    function init() {
        renderer = new THREE.WebGLRenderer({
            antialias: true
        });
        renderer.setClearColor(0xF1F2F7);
        renderer.setPixelRatio( window.devicePixelRatio );
        container = document.getElementById("container");
        renderer.setSize(window.innerWidth, window.innerHeight);
        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xF1F2F7 );
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        camera.position.set(0, 400, 600);
        // 光线的照射
        var ambiColor = "#f2f2f2";
        var spotLight = new THREE.SpotLight(ambiColor);
        spotLight.position.set( -100, 100, -100);
        scene.add(spotLight);
        var spotLight2 = new THREE.SpotLight(ambiColor);
        spotLight2.position.set( 100, 100, 150);
        scene.add(spotLight2);

        controls = new THREE.OrbitControls(camera);//用户交互

        //设置相机的角度范围
        controls.maxPolarAngle = Math.PI * 0.5;
        //设置相机距离原点的最远距离
        controls.minDistance = 0;
        //设置相机距离原点的最远距离
        controls.maxDistance = 2000;
        controls.maxDistance = 2000;

        raycaster = new THREE.Raycaster();
        mouse = new THREE.Vector2();
        document.body.appendChild(renderer.domElement);
        document.addEventListener('click', onDocumentMouseClick, false);

        var helper = new THREE.GridHelper(1200, 50, 0xCD3700, 0x4A4A4A);
        scene.add(helper);

        /*var mesh1 = new THREE.MeshBasicMaterial({ color: 0xff0000, side: THREE.DoubleSide })
        var mesh2 = new THREE.MeshBasicMaterial({ color: 0x00ff00, map: new THREE.TextureLoader().load("Images/heroAccent.png"), side: THREE.DoubleSide })
        var mesh3 = new THREE.MeshBasicMaterial({ color: 0x0000ff, side: THREE.DoubleSide })
        var cubeGeometry = new THREE.BoxGeometry(100, 100, 100);
        var cubeMaterial = new THREE.MeshFaceMaterial([mesh1, mesh1, mesh2, mesh1, mesh1, mesh1]);
        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
        cube.position.y = 50;
        cube.name = "cube";
        scene.add(cube);
        objects.push(cube);

        var meshMaterial = [
			//new THREE.MeshBasicMaterial({ color: 0x00ff00, map: new THREE.TextureLoader().load("Images/heroAccent.png"), side: THREE.DoubleSide }),
            //new THREE.MeshBasicMaterial({ color: 0x00ff00, map: new THREE.TextureLoader().load("Images/heroAccent.png"), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ color: 0x00ff00, map: new THREE.TextureLoader().load("Images/heroAccent.png"), side: THREE.DoubleSide })
        ];
        geometry = new THREE.CylinderGeometry(40, 40, 40, 64);
        var cylinder = new THREE.Mesh(geometry, meshMaterial);
        //cylinder.children[0].castShadow = true;
        cylinder.position.x = 50
        cylinder.position.y = 50;
        cylinder.position.z = 100;
        cylinder.rotation.x = Math.PI / 2;
        cylinder.userData.type = 'cylinder';
        console.log(cylinder.children)
        scene.add(cylinder);
        objects.push(cylinder);*/

        initDragControls();

        render();
    }

    /*
     * 鼠标单击事件
     */
    function onDocumentMouseClick(event) {
        //event.preventDefault();
        var intersects = getDeviceIntersects(event.offsetX, event.offsetY);
        if (intersects.length > 0) {
            var object = intersects[0].object;
            selectedObject = object;
            transformControls.attach(object);

            for (var i = 0; i < object.material.length; i++) {
                var material = object.material[i];
                if (material.userData.selected) {
                    material.userData.selected = undefined;
                    material.color = material.userData.color;
                    material.userData.color = undefined;
                    material.wireframe = false;
                }
            }
            selectedFaceIndex = intersects[0].face.materialIndex;
            selectedObject.material[selectedFaceIndex].userData.selected = true;
            selectedObject.material[selectedFaceIndex].userData.color = selectedObject.material[selectedFaceIndex].color;
            selectedObject.material[selectedFaceIndex].color = new THREE.Color(0xff9900);
            selectedObject.material[selectedFaceIndex].wireframe = true;
            //更改面的颜色
            //object.material[intersects[0].face.materialIndex].color = new THREE.Color(0x6600ff);
            //object.material[intersects[0].face.materialIndex] = new THREE.MeshBasicMaterial({ color: 0x00ff00, map: new THREE.TextureLoader().load("Images/heroAccent.png"), side: THREE.DoubleSide });
        } 
    }

    /*
 *   鼠标平移事件
 *   */
    function onDocumentMouseMove(event) {
        event.preventDefault();
        if (selectedObj) {
            var mouse = convertTo3DCoordinate(event.clientX, event.clientY);
            selectedObj.position.copy(mouse);
        }
        else {
            var intersects = getDeviceIntersects(event.offsetX, event.offsetY);
            if (intersects.length > 0) {
                var selected = intersects[0];	//取第一个物体
                if (selected.object instanceof THREE.Sprite) {
                    $(container).css('cursor', 'pointer');
                } else {
                    $(container).css('cursor', 'default');
                }
            } else {
                $(container).css('cursor', 'default');
            }
        }
    }

    /*
     * 鼠标双击事件
     */
    function onDocumentMouseDblClick(event) {
        event.preventDefault();
        var intersects = getDeviceIntersects(event.offsetX, event.offsetY);
        if(intersects.length > 0){
            var object = intersects[0].object;
            selectedObj = object;
        }else{
            selectedObj = undefined;
        }
    }

    function convertTo3DCoordinate(clientX, clientY) {
        var mv = new THREE.Vector3(
            (clientX / container.innerWidth) * 2 - 1,
            -(clientY / container.innerHeight) * 2 + 1,
            0.5);
        mv.unproject(this.camera);
        return mv;
    }

    /*
     *	获取鼠标选中的设备和视频
     *	param {number} x 屏幕坐标X
     *  param {number} y 屏幕坐标Y
     *	return {THREE.Sprite || undefined} intersects 设备或视频的Sprite
     */
    function getDeviceIntersects(x, y) {
        var vector = new THREE.Vector3();//三维坐标对象
        vector.set(
                (x / window.innerWidth) * 2 - 1,
                -(y / window.innerHeight) * 2 + 1,
                0.5);
        vector.unproject(camera);
        var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());
        var intersects = raycaster.intersectObjects(objects, true);
        return intersects;
    }

    function render() {
        controls.update();
        TWEEN.update();
        transformControls.update();
        requestAnimationFrame(render);
        renderer.render(scene, camera);
    }

    // 添加拖拽控件
    function initDragControls() {
        // 添加平移控件
        transformControls = new THREE.TransformControls(camera, renderer.domElement);
        transformControls.setMode('translate');
        scene.add(transformControls);

        // 初始化拖拽控件
        /*var dragControls = new THREE.DragControls(objects, camera, renderer.domElement);

        // 鼠标略过事件
        dragControls.addEventListener('hoveron', function (event) {
            // 让变换控件对象和选中的对象绑定
            transformControls.attach(event.object);
        });
        // 开始拖拽
        dragControls.addEventListener('dragstart', function (event) {
            controls.enabled = false;
        });
        // 拖拽结束
        dragControls.addEventListener('dragend', function (event) {
            controls.enabled = true;
        });*/
    }

    function changeColor() {
        var color = parseInt($(".Color").val().substr(1), 16);
        if (selectedObject !== undefined && selectedFaceIndex !== undefined) {
            selectedObject.material[selectedFaceIndex].userData.selected = true;
            selectedObject.material[selectedFaceIndex].userData.color = new THREE.Color(color);
            selectedObject.material[selectedFaceIndex].color = new THREE.Color(color);
            selectedObject.material[selectedFaceIndex].wireframe = false;
        }
    }

    function changeMap() {
        console.log(materialMap);
        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00, map: materialMap.texture, side: THREE.DoubleSide });
        if (selectedObject !== undefined && selectedFaceIndex !== undefined) {
            selectedObject.material[selectedFaceIndex] = new THREE.MeshBasicMaterial({ map: materialMap.texture, side: THREE.DoubleSide });
            selectedObject.material[selectedFaceIndex].userData.selected = true;
            selectedObject.material[selectedFaceIndex].wireframe = false;
        }
    }

    $(function () {
        init();

        $(".box-btn").click(function (e) {
            var mesh1 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var mesh2 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var mesh3 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var mesh4 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var mesh5 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var mesh6 = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide })
            var cubeGeometry = new THREE.BoxGeometry(100, 100, 100);
            var cubeMaterial = new THREE.MeshFaceMaterial([mesh1, mesh2, mesh3, mesh4, mesh5, mesh6]);
            var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.y = 50;
            cube.name = "box";
            scene.add(cube);
            objects.push(cube);
        })

        $(".cylinder-btn").click(function (e) {
            geometry = new THREE.CylinderGeometry(4, 4, 4, 64);
            var cube = new THREE.Mesh(geometry);
            cube.position.x = 10
            cube.position.y = 0.55;
            cube.position.z = 0;
            cube.rotation.x = Math.PI / 2;
            cube.userData.type = 'cylinder';
            scene.add(cube);
            objects.push(cube);
        })

        $(".trans-btn").find("i").show();
        $(".scale-btn").find("i").hide();
        $(".rotate-btn").find("i").hide();
        $(".trans-btn").click(function (e) {
            $(".trans-btn").find("i").show();
            $(".scale-btn").find("i").hide();
            $(".rotate-btn").find("i").hide();
            transformControls.setMode('translate');
            if (selectedObj) {
                transformControls.attach(selectedObj);
            }
        })
        $(".scale-btn").click(function (e) {
            $(".trans-btn").find("i").hide();
            $(".scale-btn").find("i").show();
            $(".rotate-btn").find("i").hide();
            transformControls.setMode('scale');
            if (selectedObj) {
                transformControls.attach(selectedObj);
            }
        })
        $(".rotate-btn").click(function (e) {
            $(".trans-btn").find("i").hide();
            $(".scale-btn").find("i").hide();
            $(".rotate-btn").find("i").show();
            transformControls.setMode('rotate');
            if (selectedObj) {
                transformControls.attach(selectedObj);
            }
        })

        materialMap = new UI.Texture().onChange(changeMap);
        $("#toolDiv").append($(materialMap.dom));
	})

</script>
<nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container-fluid">
        <ul class="nav navbar-nav">
            <li class="dropdown li-menu-file">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">文件<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="#" class="new-btn">新建</a></li>
                    <li><a href="#" class="save-btn">保存(ctrl+s)</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="import-btn">导入</a></li>
                    <li><a href="#" class="export-btn">导出</a></li>
                </ul>
            </li>
            <li class="dropdown li-menu-edit">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">编辑<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="#" class="undo-btn">撤销(ctrl+z)</a></li>
                    <li><a href="#" class="redo-btn">重做(ctrl+y)</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="cat-btn">剪切(ctrl+x)</a></li>
                    <li><a href="#" class="copy-btn">复制(ctrl+c)</a></li>
                    <li><a href="#" class="paste-btn">粘贴(ctrl+v)</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="paste-btn">删除(ctrl+v)</a></li>
                    <li><a href="#" class="select-all-btn">全选(ctrl+a)</a></li>
                </ul>
            </li>
            <li class="dropdown li-menu-shape">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">形状<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="#" class="plane-btn">平面</a></li>
                    <li><a href="#" class="circle-btn">圆</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="box-btn">立方体</a></li>
                    <li><a href="#" class="sphere-btn">球</a></li>
                    <li><a href="#" class="cylinder-btn">圆柱体</a></li>
                    <li><a href="#" class="tube-btn">管线</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="text-btn">文字</a></li>
                </ul>
            </li>
            <li class="dropdown li-menu-transform">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">控制<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="#" class="trans-btn">移动<i style="float:right;padding-top:2px" class="icon-ok"></i></a></li>
                    <li><a href="#" class="scale-btn">缩放<i style="float:right;padding-top:2px" class="icon-ok"></i></a></li>
                    <li><a href="#" class="rotate-btn">旋转<i style="float:right;padding-top:2px" class="icon-ok"></i></a></li>
                </ul>
            </li>
            <!--<li class="dropdown li-menu-texture">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">材质<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="#" class="color-btn">颜色<input class="Color" type="color" style="width: 64px; height: 25px; border: 0px; padding-bottom: 3px; background-color: transparent;float: right" value="#000000" onchange="changeColor()"></a></li>
                    <li><a href="#" class="picture-btn">图片</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a href="#" class="canvas-btn">自定义</a></li>
                </ul>
            </li>-->
            <li class="li-menu-texture">
                <div style="color:#fff;padding-top:14px" id="toolDiv">
                    <span>颜色</span>
                    <input class="Color" type="color" style="width: 64px; height: 25px; border: 0px; padding-bottom: 3px; background-color: transparent;" value="#ffffff" onchange="changeColor()">
                    <span>纹理</span>
                </div>
            </li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"> signsing <span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="/manage/user/editinfo">基础设置</a></li>
                    <li><a href="/manage/user/updatepwd">修改密码</a></li>
                    <li><a href="javascript:void(0)" class="quit">退出</a></li>
                </ul>
            </li>
        </ul>
    </div>
</nav>